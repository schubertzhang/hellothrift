/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "hello_types.h"

#include <algorithm>

namespace baidu { namespace longscheduler { namespace sample {

const char* HelloStruct::ascii_fingerprint = "75D662A56904CF94DB187C975E902D0E";
const uint8_t HelloStruct::binary_fingerprint[16] = {0x75,0xD6,0x62,0xA5,0x69,0x04,0xCF,0x94,0xDB,0x18,0x7C,0x97,0x5E,0x90,0x2D,0x0E};

uint32_t HelloStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_a = false;
  bool isset_b = false;
  bool isset_c = false;
  bool isset_d = false;
  bool isset_e = false;
  bool isset_f = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->a);
          isset_a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->b);
          isset_b = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->c);
          isset_c = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->d);
          isset_d = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->e);
          isset_e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->f);
          isset_f = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->g);
          this->__isset.g = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->h);
          this->__isset.h = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_a)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_b)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_c)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_d)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_e)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_f)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t HelloStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HelloStruct");

  xfer += oprot->writeFieldBegin("a", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->a);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("b", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->b);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("c", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->c);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("d", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->d);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("e", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->e);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("f", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->f);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.g) {
    xfer += oprot->writeFieldBegin("g", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->g);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.h) {
    xfer += oprot->writeFieldBegin("h", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeBinary(this->h);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HelloStruct &a, HelloStruct &b) {
  using ::std::swap;
  swap(a.a, b.a);
  swap(a.b, b.b);
  swap(a.c, b.c);
  swap(a.d, b.d);
  swap(a.e, b.e);
  swap(a.f, b.f);
  swap(a.g, b.g);
  swap(a.h, b.h);
  swap(a.__isset, b.__isset);
}

const char* InvalidRequestException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t InvalidRequestException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t InvalidRequestException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_why = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->why);
          isset_why = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_why)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t InvalidRequestException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("InvalidRequestException");

  xfer += oprot->writeFieldBegin("why", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->why);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InvalidRequestException &a, InvalidRequestException &b) {
  using ::std::swap;
  swap(a.why, b.why);
}

}}} // namespace
