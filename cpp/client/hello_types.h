/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef hello_TYPES_H
#define hello_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace sample {

typedef struct _HelloStruct__isset {
  _HelloStruct__isset() : g(true), h(false) {}
  bool g;
  bool h;
} _HelloStruct__isset;

class HelloStruct {
 public:

  static const char* ascii_fingerprint; // = "75D662A56904CF94DB187C975E902D0E";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0xD6,0x62,0xA5,0x69,0x04,0xCF,0x94,0xDB,0x18,0x7C,0x97,0x5E,0x90,0x2D,0x0E};

  HelloStruct() : a(false), b(0), c(0), d(0), e(0LL), f(0), g("hello"), h() {
  }

  virtual ~HelloStruct() throw() {}

  bool a;
  int8_t b;
  int16_t c;
  int32_t d;
  int64_t e;
  double f;
  std::string g;
  std::string h;

  _HelloStruct__isset __isset;

  void __set_a(const bool val) {
    a = val;
  }

  void __set_b(const int8_t val) {
    b = val;
  }

  void __set_c(const int16_t val) {
    c = val;
  }

  void __set_d(const int32_t val) {
    d = val;
  }

  void __set_e(const int64_t val) {
    e = val;
  }

  void __set_f(const double val) {
    f = val;
  }

  void __set_g(const std::string& val) {
    g = val;
    __isset.g = true;
  }

  void __set_h(const std::string& val) {
    h = val;
    __isset.h = true;
  }

  bool operator == (const HelloStruct & rhs) const
  {
    if (!(a == rhs.a))
      return false;
    if (!(b == rhs.b))
      return false;
    if (!(c == rhs.c))
      return false;
    if (!(d == rhs.d))
      return false;
    if (!(e == rhs.e))
      return false;
    if (!(f == rhs.f))
      return false;
    if (__isset.g != rhs.__isset.g)
      return false;
    else if (__isset.g && !(g == rhs.g))
      return false;
    if (__isset.h != rhs.__isset.h)
      return false;
    else if (__isset.h && !(h == rhs.h))
      return false;
    return true;
  }
  bool operator != (const HelloStruct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelloStruct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HelloStruct &a, HelloStruct &b);


class InvalidRequestException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  InvalidRequestException() : why() {
  }

  virtual ~InvalidRequestException() throw() {}

  std::string why;

  void __set_why(const std::string& val) {
    why = val;
  }

  bool operator == (const InvalidRequestException & rhs) const
  {
    if (!(why == rhs.why))
      return false;
    return true;
  }
  bool operator != (const InvalidRequestException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidRequestException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(InvalidRequestException &a, InvalidRequestException &b);

} // namespace

#endif
